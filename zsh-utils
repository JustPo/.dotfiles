

function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

mkcdir() {
  mkdir -p -- "$1" &&
  cd -P -- "$1"
}

tmux_rename_window() {
  if [ -z "$1" ]; then 
    echo "Usage: tmux_rename_window <custom name>"
  else 
     tmux rename-window "$1"
  fi
}

dtrace_dump() {
  arg1="${1// /?}"
  sudo dtrace -qn 'pid$target:'"$arg1"'::entry { printf("%s\n", probefunc); } ' -p `pgrep "$1"` | grep -E "^[^@].*\."
}

if [ -d ~/codelldb/extension/adapter ]; then
 export PATH=$PATH:~/codelldb/extension/adapter
fi


timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

fcd() {
  local command=$(fd . --type directory ~ | fzf-tmux -p -w 100% --reverse --bind change:top)
  cd "$command"
}

hfcd() {
  local command=$(fd . --type directory -H --exclude '.git' --exclude '.cache' --exclude '.npm' --exclude '.cargo' --exclude 'go/pkg*' ~ | fzf-tmux -p -w 100% --reverse --bind change:top)
  cd "$command"
}

lcd() {
  local command=$(fd . --type directory --max-depth 1 | fzf-tmux -p -w 100% --reverse --bind change:top)
  cd "$command"
}

hlcd() {
  local command=$(fd . --type directory --max-depth 1 -H --exclude '.git' --exclude '.cache' --exclude '.npm' --exclude '.cargo' --exclude 'go/pkg*' | fzf-tmux -p -w 100% --reverse --bind change:top)
  cd "$command"
}

fnvim() {
  local command=$(fd . ~ | fzf-tmux -p -w 100% --reverse --bind change:top)
  if [ -n "$command" ]; then
    nvim "$command"
  fi
}

hfnvim() {
  local command=$(fd . -H --exclude '.git' --exclude '.cache' --exclude '.npm' --exclude '.cargo' --exclude 'go/pkg*' ~ | fzf-tmux -p -w 100% --reverse --bind change:top)
  if [ -n "$command" ]; then
    nvim "$command"
  fi
}

lnvim() {
  local command=$(fd . --max-depth 1 | fzf-tmux -p -w 100% --reverse --bind change:top)
  if [ -n "$command" ]; then
    nvim "$command"
  fi
}

hlnvim() {
  local command=$(fd . --max-depth 1 -H --exclude '.git' --exclude '.cache' --exclude '.npm' --exclude '.cargo' --exclude 'go/pkg*' | fzf-tmux -p -w 100% --reverse --bind change:top)
  if [ -n "$command" ]; then
    nvim "$command"
  fi
}

fopen() {
  local command=$(fd . --type file ~ | fzf-tmux -p -w 100% --reverse --bind change:top)
  if [ -n "$command" ]; then
    open "$command"
  fi
}

lopen() {
  local command=$(fd . --type file | fzf-tmux -p -w 100% --reverse --bind change:top)
  if [ -n "$command" ]; then
    open "$command"
  fi
}

gcb() {
  local command=$(git branch --all | fzf-tmux -p -w 100% --reverse --bind change:top | tr -s '[:space:]' ' ' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
  if [ -n "$command" ]; then
    git checkout "$command"
  fi
}

gdb() {
  local command=$(git branch --all | fzf-tmux -p -w 100% --reverse --bind change:top | tr -s '[:space:]' ' ' | sed -e 's/^\* //' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

  if [ -n "$command" ]; then
    if read -q "choice?Press Y/y to continue with deletion: "; then
      git branch -D "$command"
    else
      echo "'$choice' not 'Y' or 'y'. Exiting..."
    fi
  fi
}

gadd() {
  preview="git diff $@ --color=always -- {-1}"
  local selected_files=($(git diff --name-only | fzf-tmux -p -w 100% --reverse --bind change:top -m --ansi --preview $preview))
  
  if [ ${#selected_files[@]} -gt 0 ]; then 
    git add "${selected_files[@]}"
  fi
}

volume() {
  if [ $# -eq 0 ]; then
    osascript -e 'get output volume of (get volume settings)'
  else
    osascript -e "set volume output volume $1"
  fi
}
